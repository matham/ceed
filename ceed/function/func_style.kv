#:import Factory kivy.factory.Factory
#:import FunctionFactoryBase ceed.function.FunctionFactoryBase

<FuncListing@FlatSplitter>:
    size_hint_x: None
    width: '200dp'
    sizable_from: 'left'
    strip_size: '20dp'
    min_size: '15dp'
    max_size: dp(400) + max(funcs.minimum_width, control_box.minimum_width)
    spacing: '5dp'
    flat_color: app.theme.accent
    test_name: 'func splitter'
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            bar_width: '10dp'
            scroll_type: ['bars']
            do_scroll_y: False
            size_hint_y: None
            height: '68dp'
            BoxLayout:
                size_hint_min_x: control_box.minimum_width
                orientation: 'vertical'
                FlatLabel:
                    text: 'Functions'
                    flat_color: app.theme.text_primary
                BoxLayout:
                    id: control_box
                    orientation: 'horizontal'
                    padding: '5dp'
                    spacing: '5dp'
                    DraggingWidget:
                        test_name: 'func list drag'
                        drag_controller: app.drag_controller
                        drag_widget: func_spin.__self__
                        obj_dragged: func_spin.__self__
                        drag_cls: 'func_spinner'
                    FlatImageButton:
                        test_name: 'func add'
                        scale_down_color: True
                        source: 'flat_plus.png'
                        flat_color: app.theme.accent
                        on_release: funcs.add_func(func_spin.text)
                    FlatSpinner:
                        id: func_spin
                        test_name: 'func spinner'
                        text: 'Const'
                        values: sorted(app.function_factory.funcs_inst.keys(), key=lambda x: x.lower()) if app.function_factory.funcs_inst else []
                        text_autoupdate: True
                        size_hint_min_x: self.minimum_width
                        flat_color: app.theme.text_primary
                        flat_menu_color: app.theme.accent
                        flat_drop_background_color: app.theme.primary_text
                        flat_drop_text_color: app.theme.text_primary
                        flat_border_color: app.theme.divider
        ScrollView:
            bar_width: '15dp'
            scroll_type: ['bars']
            FuncList:
                on_kv_post: app.funcs_container = self
                id: funcs
                test_name: 'func list'
                drag_append_end: True
                spacer_props: {'size_hint_y': None, 'height': '50dp', 'size_hint_min_x': '40dp'}
                drag_classes: ['func', 'func_spinner']
                function_factory: app.function_factory
                orientation: 'vertical'
                spacing: '3dp'
                padding: '0dp', '0dp', '10dp', '12dp'
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                touch_deselect_last: True
                canvas:
                    Color:
                        rgba: (152 / 255., 153 / 255., 155 / 255., 1.) if app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in ('func', 'func_spinner') else (0, 0, 0, 0)
                    Rectangle:
                        pos: self.pos
                        size: self.width, dp(10)


<FuncPropTextWidget>:
    size_hint_y: None
    height: self.minimum_height
    multiline: False
    on_focus: if not self.focus: self._update_attr(self.text)


<FuncPropBoolWidget>:
    size_hint_y: None
    height: self.texture_size[1]
    size_hint_min_x: self.texture_size[0]
    padding: '5dp', '5dp'
    flat_color: app.theme.text_primary
    flat_background_color: app.theme.primary_light


<FuncWidgetStyle@object>:
    size_hint_y: None
    orientation: 'vertical'
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    is_visible: self.parent is not None and self.parent.is_visible
    show_more: expand.is_open
    expand_widget: expand
    BoxSelector:
        id: selector
        size_hint_y: None
        height: '34dp'
        orientation: 'horizontal'
        spacing: '5dp'
        padding: '5dp'
        size_hint_min_x: self.minimum_width
        controller: root.selection_controller
        canvas:
            Color:
                rgba: app.theme.interpolate(app.theme.primary_light, app.theme.primary, root.theme_interpolation) if not root.selected else app.theme.primary
            Rectangle:
                size: self.size
                pos: self.pos
        DraggingWidget:
            id: dragger
            test_name: 'func drag btn'
            drag_widget: selector.__self__
            obj_dragged: root.__self__
            drag_cls: 'func'
            drag_copy: True
            flat_color: .196, .122, .063, 1
        ExpandWidget:
            id: expand
            state: 'normal'
            on_kv_post: root.handle_expand_widget(expand)
        FlatLabel:
            id: func_label
            test_name: 'func label'
            center_texture: False
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            text: root.ref_func.name if root.ref_func is not None else root.func.name
            text_size: self.width, None
            shorten: True
            size_hint_min_x: '25dp'
        FlatImageButton:
            id: del_btn
            test_name: 'del_btn_func'
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            disabled: root.func.has_ref if root.ref_func is None else False
            on_release: root.remove_func()
        FlatImageButton:
            test_name: 'func settings open'
            scale_down_color: True
            source: 'flat_dots_vertical.png' if root.ref_func is None else 'call-split.png'
            flat_color: app.theme.accent
            on_release:
                if root.ref_func is not None: root.replace_ref_func_with_source()
                if root.ref_func is None: root.create_settings_dropdown()
                if root.ref_func is None: root.settings_root.open(selector)
                if root.ref_func is None: root.settings_root.splitter.width = max(selector.width, root.settings_root.splitter.width)

<FuncSettingsDropDown>:
    test_name: 'func settings'
    do_scroll: False, False
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    splitter: splitter
    settings: settings
    FlatSplitter:
        id: splitter
        size_hint: None, None
        sizable_from: 'left'
        flat_color: app.theme.accent
        height: self.minimum_height
        min_size: self.minimum_width
        BoxLayout:
            id: settings
            size_hint_y: None
            orientation: 'vertical'
            spacing: '5dp'
            padding: '5dp'
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            FuncNamePropTextWidget:
                test_name: 'func name'
                func: root.func_widget.ref_func or root.func_widget.func
                prop_name: 'name'
                on_kv_post: self.apply_binding()
                disabled: root.func_widget.func.parent_func is not None or not isinstance(root.func_widget.func_controller, FunctionFactoryBase)
            FlatLabel:
                test_name: 'func description'
                padding: '5dp', '5dp'
                size_hint_y: None
                halign: 'center'
                flat_color: app.theme.text_primary
                height: self.texture_size[1]
                text_size: self.width, None
                text: root.func_widget.func.description


<GroupFuncListStyle@object>:
    spacing: '5dp'
    size_hint_y: None
    orientation: 'vertical'
    is_visible: self.group_widget.show_more and self.group_widget.is_visible
    padding: '15dp', '5dp', 0, (0 if self.children and not (app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in ('func', 'func_spinner')) else '12dp')
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    spacer_props: {'size_hint_y': None, 'height': '50dp', 'size_hint_min_x': '40dp'}
    drag_classes: ['func', 'func_spinner']
    controller: self.group_widget.func
    canvas:
        Color:
            rgba: 152 / 255., 153 / 255., 155 / 255., 1.
        Rectangle:
            pos: self.x + dp(15), self.y
            size: self.width - dp(15), dp(10) if (app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in ('func', 'func_spinner')) else 0
        Color:
            rgba: app.theme.divider
        Rectangle:
            pos: self.x + dp(11), self.y
            size: dp(2), self.height - dp(2)


<FuncNoiseDropDown>:
    do_scroll: False, False
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    param_container: param_container
    splitter: splitter
    FlatSplitter:
        id: splitter
        size_hint: None, None
        sizable_from: 'left'
        flat_color: app.theme.accent
        height: self.minimum_height
        min_size: self.minimum_width
        BoxLayout:
            size_hint_y: None
            orientation: 'vertical'
            spacing: '5dp'
            padding: '5dp'
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            ThemedSpinner:
                id: noise_selector
                size_hint_y: None
                height: '36dp'
                values: ['NoNoise'] + list(sorted(root.noise_factory.noise_classes.keys()))
                text: 'NoNoise' if root.func.noisy_parameters.get(root.prop_name) is None else root.func.noisy_parameters[root.prop_name].name
                text_autoupdate: True
                size_hint_min_x: self.minimum_width
                on_text: root.noise_cls_update()
            XYSizedGridLayout:
                id: param_container
                cols: 2
                size_hint_y: None
                spacing: '5dp'
                padding: '5dp'
                height: self.minimum_height
                size_hint_min_x: self.minimum_width


<NoiseSelection@FlatImageButton>:
    func: None
    prop_name: ''
    scale_down_color: True
    source: 'flat_dots_vertical.png'
    flat_color: app.theme.accent
    settings_root: None
    on_release:
        if self.settings_root is None: self.settings_root = Factory.FuncNoiseDropDown(func=self.func, prop_name=self.prop_name)
        self.settings_root.open(root)
        root.settings_root.splitter.width = max(root.parent.width, root.settings_root.splitter.width)
