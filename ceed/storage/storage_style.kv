#:import Clock kivy.clock.Clock

<DataBar@BoxLayout>:
    size_hint: None, None
    size: self.minimum_width, '34dp'
    more: more.__self__  # need to keep a ref to it after it's removed
    data_view: data_view.__self__
    BoxLayout:
        padding: '5dp'
        spacing: '5dp'
        size_hint_x: None
        width: self.minimum_width
        id: box
        on_kv_post:
            Clock.schedule_once(lambda *x: self.remove_widget(data_view.__self__))
            Clock.schedule_once(lambda *x: self.remove_widget(more.__self__))
        FlatImageButton:
            scale_down_color: True
            source: 'flat_save.png'
            flat_color: app.theme.accent
            hover_text: "Save current file"
            on_release:
                if app.ceed_data.filename: app.ceed_data.save()
                if not app.ceed_data.filename: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.save_as, overwrite=True, ext='.h5'), mode='save', target=app.ceed_data.root_path, title='Save h5 file', filters=['*.h5', '*.*'])
        FlatImageButton:
            scale_down_color: True
            source: 'flat_menu_down.png'
            flat_color: app.theme.accent
            on_release: root.more.open(self.parent)
        FlatDropDown:
            id: more
            flat_color: app.theme.primary_text
            flat_border_color: app.theme.divider
            FlatButton:
                text: 'Save h5 file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release:
                    if app.ceed_data.filename: app.ceed_data.save()
                    if not app.ceed_data.filename: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.save_as, overwrite=True, ext='.h5'), mode='save', target=app.ceed_data.root_path, title='Save h5 file', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Save as h5 file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.save_as, overwrite=True, ext='.h5'), mode='save', target=app.ceed_data.root_path, title='Save h5 file', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Discard unsaved changes'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.ceed_data.discard_file()
            FlatButton:
                text: 'Close h5 file & clear'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.ceed_data.ui_close()
            FlatButton:
                text: 'Clear & create h5 file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.create_file, overwrite=True, clear_data=True, ext='.h5'), mode='save', target=app.ceed_data.root_path, title='Create h5 file', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Clear & open h5 file (read only)'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.open_file, clear_data=True, read_only=True), target=app.ceed_data.root_path, title='Open h5 file RO', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Clear & open h5 file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.open_file, clear_data=True), target=app.ceed_data.root_path, title='Open h5 file', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Import stages & app settings from h5 file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.import_file), target=app.ceed_data.root_path, title='Import h5 file', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Import stages from h5 file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.import_file, stages_only=True), target=app.ceed_data.root_path, title='Import h5 file', filters=['*.h5', '*.*'])
            FlatButton:
                text: 'Import stages & app settings from YAML file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.read_yaml_config, requires_app_settings=False), target=app.ceed_data.root_path, title='Import yaml file', filters=['*.yml', '*.yaml', '*.*'])
            FlatButton:
                text: 'Import stages from YAML file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.read_yaml_config, stages_only=True), target=app.ceed_data.root_path, title='Import yaml file', filters=['*.yml', '*.yaml', '*.*'])
            FlatButton:
                text: 'Export stages & app settings to YAML file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.write_yaml_config, overwrite=True, ext='.yml'), mode='save', target=app.ceed_data.root_path, title='Export yaml file', filters=['*.yml', '*.yaml', '*.*'])
            FlatButton:
                text: 'Export stages to YAML file'
                size_hint: None, None
                size: self.texture_size
                scale_down_color: True
                flat_color: app.theme.text_primary
                on_release: app.open_filechooser(callback=app.ceed_data.get_filebrowser_callback(app.ceed_data.write_yaml_config, overwrite=True, stages_only=True, ext='.yml'), mode='save', target=app.ceed_data.root_path, title='Export yaml file', filters=['*.yml', '*.yaml', '*.*'])
        FlatImageButton:
            scale_down_color: True
            source: 'calendar-text-outline.png'
            flat_color: app.theme.accent
            on_release: root.data_view.open(self.parent)
            hover_text: "Show logged data"
        FlatDropDown:
            id: data_view
            flat_color: app.theme.primary_text
            flat_border_color: app.theme.divider
            do_scroll_x: False
            do_scroll_y: False
            ExperimentLogWidget:
                id: experiment_log
                spacing: '10dp'
                size_hint: None, None
                width: '600dp'
                height: self.minimum_height
                log_container: log_container
                orientation: 'vertical'
                ScrollView:
                    size_hint_y: None
                    height: min(dp(150), log_label.height)
                    scroll_type: ['bars', ]
                    bar_width: '15dp'
                    canvas.before:
                        Color:
                            rgba: app.theme.interpolate(app.theme.primary_light, app.theme.primary, .2)
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    FlatLabel:
                        id: log_label
                        markup: True
                        text: '[b]Experiment log[/b]\n----------------------\n{}'.format(experiment_log.log_text)
                        size_hint_y: None
                        height: self.texture_size[1]
                        text_size: self.width, None
                        padding: '5dp', '5dp'
                        flat_color: app.theme.text_primary
                BoxLayout:
                    size_hint_y: None
                    height: self.minimum_height
                    padding: '5dp'
                    FlatLabel:
                        text: '[b]Configuration[/b]:'
                        size_hint: None, None
                        size: self.texture_size
                        flat_color: app.theme.text_primary
                        markup: True
                        padding: '5dp', '2dp'
                    ThemedSpinner:
                        id: source_exp_name
                        values: ['app'] + experiment_log.experiment_names
                        text_autoupdate: True
                        on_text: experiment_log.bind_to_current_config_selection(self.text)
                        size_hint_x: None
                        width: self.minimum_width
                        padding: '5dp', '2dp'
                    FlatLabel:
                        text: '[b]Copy MEA config to[/b]:'
                        size_hint: None, None
                        size: self.texture_size
                        padding: '10dp', '2dp'
                        flat_color: app.theme.text_primary
                        markup: True
                    ThemedSpinner:
                        id: target_exp_name
                        values: experiment_log.experiment_names
                        text_autoupdate: True
                        size_hint_x: None
                        padding: '5dp', '2dp'
                        width: self.minimum_width
                    FlatButton:
                        text: 'Apply'
                        size_hint: None, None
                        size: self.texture_size
                        scale_down_color: True
                        flat_background_color: app.theme.accent
                        padding: '5dp', '2dp'
                        on_release: if target_exp_name.text: experiment_log.copy_mea_config_to_exp(source_exp_name.text, target_exp_name.text)
                ScrollView:
                    scroll_type: ['bars', ]
                    bar_width: '15dp'
                    size_hint_y: None
                    height: '100dp'
                    canvas.before:
                        Color:
                            rgba: app.theme.interpolate(app.theme.primary_light, app.theme.primary, .2)
                        Rectangle:
                            size: self.size
                            pos: self.pos
                    FlatLabel:
                        text: '[b]Configuration[/b]\n-----------------\n{}\n-----------------\n'.format(experiment_log.selected_mea_config_str)
                        markup: True
                        size_hint_y: None
                        height: self.texture_size[1]
                        text_size: self.width, None
                        padding: '5dp', '5dp'
                        flat_color: app.theme.text_primary
                ScrollView:
                    size_hint_y: None
                    height: min(dp(450), log_container.height)
                    scroll_type: ['bars', ]
                    bar_width: '10dp'
                    BoxLayout:
                        id: log_container
                        orientation: 'vertical'
                        size_hint_y: None
                        height: self.minimum_height
                        padding: '5dp'
                        spacing: '5dp'


<ImageLogWidget>:
    more: more.__self__
    show_more: expand.is_open
    orientation: 'vertical'
    size_hint_y: None
    height: self.minimum_height
    image_widget: image_widget
    canvas:
        Color:
            rgba: app.theme.primary_light
        Rectangle:
            size: self.size
            pos: self.pos
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        padding: '5dp'
        ExpandWidget:
            id: expand
        FlatLabel:
            markup: True
            size_hint_x: None
            width: self.texture_size[0]
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            text: '[b]Image[/b] {} - [b]Time[/b]: {:0.1f}'.format(root.image_num, root.save_time)
        FlatDivider:
            color: app.theme.divider
        FlatLabel:
            markup: True
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            shorten: True
            text_size: self.size
            text: '[b]Notes[/b]: {}'.format(root.notes)
    BoxLayout:
        id: more
        size_hint_y: None
        height: '200dp'
        spacing: '5dp'
        padding: '5dp'
        BoxLayout:
            orientation: 'vertical'
            FlatLabel:
                markup: True
                text: '[b]Notes[/b]\n---------'
                halign: 'center'
                size_hint_y: None
                height: self.texture_size[1]
                padding: '5dp', '5dp'
                flat_color: app.theme.text_primary
            ScrollView:
                scroll_type: ['bars', ]
                bar_width: '15dp'
                FlatLabel:
                    text: root.notes
                    size_hint_y: None
                    height: self.texture_size[1]
                    text_size: self.width, None
                    padding: '5dp', '5dp'
                    flat_color: app.theme.text_primary
        RelativeLayout:
            on_size: image_widget.update_img(image_widget.img)
            canvas:
                Color:
                    rgba: 1, 1, 1, 1
            BufferImage:
                id: image_widget
                available_size: self.parent.size
                size_hint: None, None
                size: self.image_size
                auto_bring_to_front: False
                do_collide_after_children: True
                do_rotation: False
                do_scale: False
                do_translation: False, False


<StageLogWidget>:
    more: more.__self__
    show_more: expand.is_open
    orientation: 'vertical'
    size_hint_y: None
    height: self.minimum_height
    image_widget: image_widget
    canvas:
        Color:
            rgba: app.theme.primary_light
        Rectangle:
            size: self.size
            pos: self.pos
    BoxLayout:
        size_hint_y: None
        height: '34dp'
        spacing: '5dp'
        padding: '5dp'
        canvas:
            Color:
                rgba: (1, 0, 0, 1) if root.mea_config_different else (1, 0, 0, 0)
            Rectangle:
                pos: self.pos
                size: dp(4), self.height
        ExpandWidget:
            id: expand
        FlatLabel:
            markup: True
            size_hint_x: None
            width: self.texture_size[0]
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            text: '[b]Exp[/b] {}, [b]{}[/b] ({:0.1f}s / {}) - [b]Time[/b]: {:0.1f}'.format(root.experiment_number, root.stage, root.duration_sec, root.duration_frames, root.save_time)
        FlatDivider:
            color: app.theme.divider
        FlatLabel:
            markup: True
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            shorten: True
            text_size: self.size
            text: '[b]Notes[/b]: {}'.format(root.notes)
    BoxLayout:
        id: more
        size_hint_y: None
        height: '300dp'
        spacing: '5dp'
        padding: '5dp'
        orientation: 'vertical'
        BoxLayout:
            BoxLayout:
                orientation: 'vertical'
                FlatLabel:
                    markup: True
                    text: '[b]Notes[/b]\n---------'
                    halign: 'center'
                    size_hint_y: None
                    height: self.texture_size[1]
                    padding: '5dp', '5dp'
                    flat_color: app.theme.text_primary
                ScrollView:
                    scroll_type: ['bars', ]
                    bar_width: '15dp'
                    FlatTextInput:
                        text: root.notes
                        size_hint_y: None
                        height: self.minimum_height
                        padding: '5dp'
                        flat_color: app.theme.text_primary
                        hint_text: 'Notes'
                        on_focus: if not self.focus: root.update_text(self.text)
            RelativeLayout:
                on_size: image_widget.update_img(image_widget.img)
                canvas:
                    Color:
                        rgba: 1, 1, 1, 1
                BufferImage:
                    id: image_widget
                    available_size: self.parent.size
                    size_hint: None, None
                    size: self.image_size
                    auto_bring_to_front: False
                    do_collide_after_children: True
                    do_rotation: False
                    do_scale: False
                    do_translation: False, False
