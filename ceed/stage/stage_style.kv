#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import ceil math.ceil

<StageListing@FlatSplitter>:
    size_hint_x: None
    width: '200dp'
    sizable_from: 'left'
    strip_size: '20dp'
    min_size: '15dp'
    max_size: '400dp'
    spacing: '5dp'
    flat_color: app.theme.accent
    test_name: 'stage splitter'
    BoxLayout:
        orientation: 'vertical'
        ScrollView:
            bar_width: '10dp'
            scroll_type: ['bars']
            do_scroll_y: False
            size_hint_y: None
            height: '68dp'
            BoxLayout:
                size_hint_min_x: control_box.minimum_width
                orientation: 'vertical'
                FlatLabel:
                    text: 'Stages'
                    flat_color: app.theme.text_primary
                BoxLayout:
                    id: control_box
                    orientation: 'horizontal'
                    padding: '5dp'
                    spacing: '5dp'
                    DraggingWidget:
                        test_name: 'stage list drag'
                        drag_controller: app.drag_controller
                        drag_widget: stage_spin.__self__
                        obj_dragged: stage_spin.__self__
                        drag_cls: 'stage_spinner'
                    FlatImageButton:
                        test_name: 'stage add'
                        scale_down_color: True
                        source: 'flat_plus.png'
                        flat_color: app.theme.accent
                        on_release: stages.add_stage(stage_spin.text)
                    FlatSpinner:
                        id: stage_spin
                        test_name: 'stage spinner'
                        values: sorted(app.stage_factory.stage_names.keys()) if app.stage_factory.stage_names else []
                        text_autoupdate: True
                        size_hint_min_x: self.minimum_width
                        flat_color: app.theme.text_primary
                        flat_menu_color: app.theme.accent
                        flat_drop_background_color: app.theme.primary_text
                        flat_drop_text_color: app.theme.text_primary
                        flat_border_color: app.theme.divider
        ScrollView:
            bar_width: '15dp'
            scroll_type: ['bars']
            StageList:
                id: stages
                test_name: 'stage list'
                on_kv_post: app.stages_container = self
                orientation: 'vertical'
                spacing: '3dp'
                padding: '0dp', 0, '10dp', '12dp'
                stage_factory: app.stage_factory
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                touch_deselect_last: True
                spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
                drag_classes: ['shape', 'shape_group', 'func', 'func_spinner', 'stage', 'stage_spinner']
                drag_append_end: True
                canvas:
                    Color:
                        rgba: (152 / 255., 153 / 255., 155 / 255., 1.) if app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in ('shape', 'shape_group', 'func', 'func_spinner', 'stage', 'stage_spinner') else (0, 0, 0, 0)
                    Rectangle:
                        pos: self.pos
                        size: self.width, dp(10)


<StageWidgetStyle@object>:
    size_hint_y: None
    orientation: 'vertical'
    spacing: '3dp'
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    is_visible: self.parent is not None and self.parent.is_visible
    more: more.__self__
    show_more: expand.is_open
    expand_widget: expand
    BoxSelector:
        id: selector
        size_hint_y: None
        height: '34dp'
        orientation: 'horizontal'
        spacing: '5dp'
        padding: '5dp'
        size_hint_min_x: self.minimum_width
        controller: root.selection_controller
        canvas:
            Color:
                rgba: app.theme.interpolate(app.theme.primary_light, app.theme.primary, .4) if not root.selected else app.theme.primary
            Rectangle:
                size: self.size
                pos: self.pos
        DraggingWidget:
            id: dragger
            test_name: 'stage drag btn'
            drag_widget: selector
            obj_dragged: root.__self__
            drag_cls: 'stage'
            drag_copy: True
            flat_color: .482, .114, 0, 1
        ExpandWidget:
            id: expand
            state: 'normal'
            on_kv_post:
                if root.ref_stage is not None: selector.remove_widget(self)
                if root.ref_stage is not None: root.expand = None
        FlatLabel:
            id: stage_label
            test_name: 'stage label'
            center_texture: False
            padding: ('5dp', '5dp')
            flat_color: app.theme.text_primary
            text: root.ref_stage.name if root.ref_stage is not None else root.stage.name
            text_size: self.width, None
            shorten: True
            size_hint_min_x: '25dp'
        FlatImageButton:
            id: del_btn
            test_name: 'del btn stage'
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            disabled: root.stage.has_ref if root.ref_stage is None else False
            on_release: root.remove_stage()
        FlatImageButton:
            test_name: 'stage settings open'
            scale_down_color: True
            source: 'flat_dots_vertical.png' if root.ref_stage is None else 'call-split.png'
            flat_color: app.theme.accent
            on_release:
                if root.ref_stage is not None: root.replace_ref_with_source()
                if root.ref_stage is None: root.create_settings_dropdown()
                if root.ref_stage is None: root.settings_root.open(selector)
                if root.ref_stage is None: root.settings_root.splitter.width = max(selector.width, root.settings_root.splitter.width)
    BoxLayout:
        id: more
        spacing: '3dp'
        size_hint_y: None
        orientation: 'vertical'
        padding: ('15dp', 0, 0, 0)
        height: self.minimum_height
        size_hint_min_x: self.minimum_width


<StageContainerListStyle@object>:
    spacing: '5dp'
    size_hint_y: None
    orientation: 'vertical'
    spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
    back_color: 1, 1, 1, 1
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    padding: '5dp', 0, 0, (0 if self.children and not (app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in self.drag_classes) else '12dp')
    is_visible: self.stage_widget.show_more and self.stage_widget.is_visible
    drag_target_stage: self.stage_widget.stage
    canvas:
        Color:
            rgba: 152 / 255., 153 / 255., 155 / 255., 1.
        Rectangle:
            pos: self.x + dp(5), self.y
            size: self.width - dp(5), dp(10) if (app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in self.drag_classes) else 0
        Color:
            rgba: self.back_color
        Rectangle:
            pos: self.x + dp(1), self.y
            size: dp(2), self.height



<StageSettingItem@FlatLabel>:
    size_hint: (None, None)
    size: self.texture_size
    flat_color: app.theme.text_primary

<StageSettingsDropdownStyle@object>:
    test_name: 'stage settings'
    do_scroll: (False, False)
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    splitter: splitter
    settings: settings
    FlatSplitter:
        id: splitter
        size_hint: (None, None)
        sizable_from: 'left'
        flat_color: app.theme.accent
        height: self.minimum_height
        min_size: self.minimum_width
        BoxLayout:
            id: settings
            size_hint_y: None
            orientation: 'vertical'
            spacing: '5dp'
            padding: '5dp'
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            FlatSizedTextInput:
                test_name: 'stage name'
                background_color: app.theme.primary_text
                text: root.stage_widget.stage.name
                on_focus: if not self.focus: root.stage_widget.stage.name = self.text
                on_kv_post: if root.stage_widget.stage.parent_stage is not None: settings.remove_widget(self)
            BoxLayout:
                size_hint_y: None
                height: '34dp'
                spacing: '5dp'
                LightThemedToggleButton:
                    test_name: 'stage color r'
                    text: 'R'
                    state: 'down' if root.stage_widget.stage.color_r else 'normal'
                    on_state: root.stage_widget.stage.color_r = self.state == 'down'
                LightThemedToggleButton:
                    test_name: 'stage color g'
                    text: 'G'
                    state: 'down' if root.stage_widget.stage.color_g else 'normal'
                    on_state: root.stage_widget.stage.color_g = self.state == 'down'
                LightThemedToggleButton:
                    test_name: 'stage color b'
                    text: 'B'
                    state: 'down' if root.stage_widget.stage.color_b else 'normal'
                    on_state: root.stage_widget.stage.color_b = self.state == 'down'
            GridLayout:
                id: setting_items
                size_hint_y: None
                padding: '5dp'
                spacing: '5dp'
                cols: 2
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                StageSettingItem:
                    text: 'Stage order'
                BoxLayout:
                    spacing: '5dp'
                    size_hint_y: None
                    height: self.minimum_height
                    size_hint_min_x: self.minimum_width
                    LightThemedToggleButton:
                        test_name: 'stage serial'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Serial'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.order == 'serial' else 'normal'
                        on_state: root.stage_widget.stage.order = 'serial' if self.state == 'down' else 'parallel'
                    LightThemedToggleButton:
                        test_name: 'stage parallel'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Parallel'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.order == 'parallel' else 'normal'
                        on_state: root.stage_widget.stage.order = 'parallel' if self.state == 'down' else 'serial'
                StageSettingItem:
                    text: 'End on'
                BoxLayout:
                    spacing: '5dp'
                    size_hint_y: None
                    height: self.minimum_height
                    size_hint_min_x: self.minimum_width
                    LightThemedToggleButton:
                        test_name: 'stage finish all'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'All'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.complete_on == 'all' else 'normal'
                        on_state: root.stage_widget.stage.complete_on = 'all' if self.state == 'down' else 'any'
                    LightThemedToggleButton:
                        test_name: 'stage finish any'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Any'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.complete_on == 'any' else 'normal'
                        on_state: root.stage_widget.stage.complete_on = 'any' if self.state == 'down' else 'all'
                StageSettingItem:
                    text: 'Pre-compute'
                BoxLayout:
                    spacing: '5dp'
                    size_hint_y: None
                    height: self.minimum_height
                    size_hint_min_x: self.minimum_width
                    LightThemedToggleButton:
                        test_name: 'disable pre compute'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Disabled'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.disable_pre_compute else 'normal'
                        on_state: root.stage_widget.stage.disable_pre_compute = self.state == 'down'
                    LightThemedToggleButton:
                        test_name: 'default pre compute'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Default'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if not root.stage_widget.stage.disable_pre_compute else 'normal'
                        on_state: root.stage_widget.stage.disable_pre_compute = self.state == 'normal'
                StageSettingItem:
                    text: '# Loops'
                FlatSizedTextInput:
                    size_hint_y: None
                    height: self.minimum_height
                    size_hint_min_x: '50dp'
                    background_color: root.flat_color
                    input_filter: 'int'
                    on_text: root.stage_widget.stage.loop = max(int(self.text or 1), 1)
                    on_text_validate: self.text = str(root.stage_widget.stage.loop)
                    text: str(root.stage_widget.stage.loop)
                StageSettingItem:
                    text: 'Serial order'
                BoxLayout:
                    spacing: '5dp'
                    size_hint_y: None
                    height: self.minimum_height
                    size_hint_min_x: self.minimum_width
                    LightThemedToggleButton:
                        test_name: 'randomize'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Random'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.randomize_child_order else 'normal'
                        on_state: root.stage_widget.stage.randomize_child_order = self.state == 'down'
                    LightThemedToggleButton:
                        test_name: 'per loop'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Per-loop'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.randomize_order_each_loop else 'normal'
                        on_state: root.stage_widget.stage.randomize_order_each_loop = self.state == 'down'
                    LightThemedToggleButton:
                        test_name: 'lock fork'
                        size_hint_y: None
                        padding: ('5dp', '5dp')
                        text: 'Lock forked'
                        height: self.texture_size[1]
                        size_hint_min_x: self.texture_size[0]
                        state: 'down' if root.stage_widget.stage.lock_after_forked else 'normal'
                        on_state: root.stage_widget.stage.lock_after_forked = self.state == 'down'


<StageShapeDisplayStyle@object>:
    size_hint_y: None
    height: '34dp'
    size_hint_min_x: self.minimum_width
    orientation: 'horizontal'
    use_parent: False
    spacing: '5dp'
    is_visible: self.parent is not None and self.parent.is_visible
    canvas:
        Color:
            rgba: app.theme.primary_light if not self.selected else app.theme.primary
        Rectangle:
            size: self.size
            pos: self.pos
    FlatLabel:
        test_name: 'stage shape name'
        padding: '5dp', '5dp'
        flat_color: app.theme.text_primary
        center_texture: False
        text: root.stage_shape.name
        size_hint_min_x: self.texture_size[0]
    FlatImageButton:
        test_name: 'stage shape del'
        scale_down_color: True
        source: 'flat_delete.png'
        flat_color: app.theme.accent
        on_release: root.remove_shape()
    FlatImageButton:
        test_name: 'stage shape settings open'
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_release:
            root.create_settings_dropdown()
            root.settings_root.open(root)
            root.settings_root.splitter.width = max(root.width, root.settings_root.splitter.width)


<StageShapeDropdownStyle@object>:
    test_name: 'stage shape settings'
    do_scroll: (False, False)
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    splitter: splitter
    settings: settings
    FlatSplitter:
        id: splitter
        size_hint: (None, None)
        sizable_from: 'left'
        flat_color: app.theme.accent
        height: self.minimum_height
        min_size: self.minimum_width
        BoxLayout:
            id: settings
            size_hint_y: None
            orientation: 'vertical'
            spacing: '5dp'
            padding: '5dp'
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            FlatLabel:
                size_hint_y: None
                text: root.stage_shape.name
                height: self.texture_size[1]
                size_hint_min_x: self.texture_size[0]
                padding: '5dp', '5dp'
                flat_color: app.theme.text_primary
            GridLayout:
                size_hint_y: None
                padding: '5dp'
                spacing: '5dp'
                cols: 2
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                FlatLabel:
                    size_hint: (None, None)
                    text: 'Keep dark'
                    size: self.texture_size
                    flat_color: app.theme.text_primary
                LightThemedToggleButton:
                    test_name: 'stage shape keep dark'
                    padding: ('5dp', '5dp')
                    text: 'true' if root.stage_shape.keep_dark else 'false'
                    size_hint_min_x: self.texture_size[0]
                    state: 'down' if root.stage_shape.keep_dark else 'normal'
                    on_state: root.stage_shape.keep_dark = self.state == 'down'


<ShapeGraphSelector@FlatToggleButton>:
    controller: None
    size_hint: None, None
    size: self.texture_size
    padding: '5dp', '5dp'
    scale_down_color: True
    flat_color: app.theme.text_primary
    flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary
    on_release: self.controller._shapes_displayed_update_trigger()


<ShapeGraphSelectorAll@FlatButton>:
    controller: None
    size_hint: None, None
    size: self.texture_size
    padding: '5dp', '5dp'
    scale_down_color: True
    flat_color: app.theme.text_primary
    flat_background_color: app.theme.primary_light if self.state == 'normal' else app.theme.primary
    on_release: self.controller.apply_selection_all(self.text.lower())


<GraphSelectionBox@BoxLayout>:
    shape_selection_widget: shape_selection_widget
    controller: None
    orientation: 'vertical'
    size_hint_min_y: self.minimum_height
    size_hint_x: None
    width: self.minimum_width
    spacing: '5dp'
    ScrollView:
        width: shape_selection_widget.width
        size_hint_x: None
        size_hint_min_y: '200dp'
        do_scroll_x: False
        bar_width: '10dp'
        scroll_type: ['bars']
        GridLayout:
            id: shape_selection_widget
            cols: 4
            size_hint: None, None
            size: self.minimum_size
            spacing: '5dp'
            padding: 0, 0, '10dp', 0
    GridLayout:
        cols: 4
        spacing: '5dp'
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        padding: 0, 0, '10dp', 0
        FlatLabel:
            text: 'All'
            size_hint_min_x: self.texture_size[0]
            flat_color: app.theme.text_primary
        ShapeGraphSelectorAll:
            controller: root.controller
            text: 'R'
        ShapeGraphSelectorAll:
            controller: root.controller
            text: 'G'
        ShapeGraphSelectorAll:
            controller: root.controller
            text: 'B'

<StageGraph>:
    size_hint_min_x: self.minimum_width
    size_hint_y: None
    height: '300dp'
    min_size: self.minimum_height
    on_min_size: self.height = max(self.height, self.min_size)
    sizable_from: 'bottom'
    flat_color: app.theme.accent
    shape_selection_widget: shape_selection_box.shape_selection_widget
    graph: graph
    graph_labels: graph_labels
    unpinned_parent: None
    unpinned_root: None
    BoxLayout:
        id: root_box
        size_hint_min: self.minimum_size
        spacing: '5dp'
        padding: '5dp'
        GraphSelectionBox:
            id: shape_selection_box
            controller: root
        BoxLayout:
            id: graph_root
            size_hint_min: self.minimum_size
            orientation: 'vertical'
            spacing: '10dp'
            BoxLayout:
                orientation: 'horizontal'
                size_hint_min_x: self.minimum_width
                size_hint_y: None
                height: self.minimum_height
                spacing: '5dp'
                padding: ['10dp', 0]
                Widget:
                    size_hint_y: None
                    height: '40dp'
                    TimeSliceSelection:
                        size: graph_ticks_big.view_size
                        x: self.parent.x + graph_ticks_big.view_pos[0]
                        y: self.parent.y + graph_ticks_big.view_pos[1]
                        min: root.xmin
                        max: root.xmax
                        low_val: root.view_xmin
                        high_val: root.view_xmax
                        on_low_val: root.view_xmin = self.low_val
                        on_high_val: root.view_xmax = self.high_val
                    Graph:
                        id: graph_ticks_big
                        size: self.parent.size
                        pos: self.parent.pos
                        xmin: root.xmin
                        xmax: root.xmax
                        x_ticks_major: ceil((self.xmax - self.xmin) / 5.)
                        x_grid_label: True
                        draw_border: False
                        _with_stencilbuffer: False
                        label_options: {'color': (0, 0, 0, 1)}
                FlatSizedTextInput:
                    size_hint_x: None
                    width: '50dp'
                    background_color: root.flat_color
                    input_filter: 'float'
                    on_text_validate: root.view_xmin = float(self.text)
                    text: '{:.1f}'.format(root.view_xmin)
                FlatLabel:
                    text: ' - '
                    width: self.texture_size[0]
                    size_hint_x: None
                    flat_color: app.theme.text_primary
                FlatSizedTextInput:
                    size_hint_x: None
                    width: '50dp'
                    background_color: root.flat_color
                    input_filter: 'float'
                    on_text_validate: root.view_xmax = float(self.text)
                    text: '{:.1f}'.format(root.view_xmax)
            FlatDivider:
                orientation: 'horizontal'
                color: app.theme.primary_light
            ScrollView:
                size_hint_min_x: graph_box.minimum_width
                bar_width: '10dp'
                scroll_type: ['bars']
                BoxLayout:
                    id: graph_box
                    size_hint_min_x: self.minimum_width
                    size_hint_y: None
                    height: max(self.minimum_height, root.n_plots_displayed * root.shape_height + (root.n_plots_displayed - 1) * root.shape_spacing)
                    spacing: graph_ticks.view_pos[0]
                    padding: [0, 0, graph_ticks.width - graph_ticks.view_pos[0] - graph_ticks.view_size[0], 0]
                    BoxLayout:
                        id: graph_labels
                        orientation: 'vertical'
                        size_hint_x: None
                        width: self.minimum_width
                        size_hint_min_y: self.minimum_height
                    Widget:
                        id: graph
                        size_hint_min_x: '50dp'
                        on_center: root._plot_pos_update_trigger()
            Widget:
                size_hint_y: None
                height: '35dp'
                Graph:
                    id: graph_ticks
                    height: '35dp'
                    y: self.parent.y
                    width: graph_box.width - graph_labels.width
                    right: self.center and self.parent.right
                    xmin: root.view_xmin
                    xmax: root.view_xmax
                    x_ticks_major: ceil((self.xmax - self.xmin) / 5.)
                    x_grid_label: True
                    draw_border: False
                    _with_stencilbuffer: False
                    label_options: {'color': (0, 0, 0, 1)}
            FlatDivider:
                orientation: 'horizontal'
                color: app.theme.primary_light
            BoxLayout:
                size_hint: None, None
                size: self.minimum_width, '34dp'
                padding: '5dp'
                spacing: '5dp'
                FlatLabel:
                    text: 'Stages: '
                    width: self.texture_size[0]
                    size_hint_x: None
                    flat_color: app.theme.text_primary
                ThemedSpinner:
                    id: stage_spinner
                    values: sorted((s.name for s in app.stage_factory.stages)) if app.stage_factory.stage_names and app.stage_factory.stages else ['<no stage>']  # update when name change
                    text_autoupdate: True
                    size_hint_x: None
                    width: self.minimum_width
                FlatLabel:
                    text: 'Frame rate: '
                    width: self.texture_size[0]
                    size_hint_x: None
                    flat_color: app.theme.text_primary
                FlatSizedTextInput:
                    id: rate
                    size_hint_x: None
                    width: '70dp'
                    text: str(app.view_controller.frame_rate)
                    hint_text: 'rate'
                    background_color: root.flat_color
                    input_filter: 'float'
                FlatImageButton:
                    disabled: stage_spinner.text == '<no stage>'
                    source: 'flat_refresh.png'
                    flat_color: app.theme.accent
                    on_release: if stage_spinner.text: root.refresh_graph(stage_spinner.text, float(rate.text))
                    hover_text: 'refresh'
                FlatImageToggleButton:
                    source: 'flat_pin.png' if self.state == 'normal' else 'flat_pin_off.png'
                    flat_color: app.theme.accent
                    on_release: root.set_pin(self.state == 'down')
                    hover_text: 'refresh'

<StageGraphPopup@FlatModalView>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    size_hint: None, None
    size: splitter.size
    FlatSplitter:
        id: splitter
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        width: '500dp'
        max_size: '1000dp'
        StageGraph:
            unpinned_parent: splitter
            unpinned_root: root
