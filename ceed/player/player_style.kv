#:import Factory kivy.factory.Factory
#:import partial functools.partial
#:import pretty_space base_kivy_app.utils.pretty_space
#:import pretty_time base_kivy_app.utils.pretty_time


<PlayerSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    settings_container: settings_container
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        BoxLayout:
            id: settings_container
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            BoxLayout:
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                spacing: '5dp'
                ThemedSizedLabel:
                    text: 'Estimated FPS: {}.'.format(int(app.player.player.real_rate))
                ThemedSizedLabel:
                    text: 'Data rate: {}.'.format(pretty_space(app.player.player.data_rate, is_rate=True))
                ThemedLabel:
                    text: app.player.player.player_summery
                    shorten: True
                    text_size: self.size


<FFmpegSettingsDropdown@PlayerSettingsDropdown>:
    on_kv_post: self.settings_container.add_widget(app.player.ffmpeg_settings)


<FlirSettingsDropdown@PlayerSettingsDropdown>:
    on_kv_post: self.settings_container.add_widget(app.player.flir_settings)


<ThorSettingsDropdown@PlayerSettingsDropdown>:
    on_kv_post: self.settings_container.add_widget(app.player.thor_settings)


<ClientSettingsDropdown@PlayerSettingsDropdown>:
    on_kv_post: self.settings_container.add_widget(app.player.client_settings)


<RecorderSettingsDropdown@FlatDropDown>:
    flat_color: app.theme.primary_text
    flat_border_color: app.theme.divider
    do_scroll: False, False
    settings_container: settings_container
    FlatSplitter:
        size_hint: None, None
        height: self.minimum_height
        min_size: self.minimum_width
        sizable_from: 'right'
        flat_color: app.theme.accent
        BoxLayout:
            id: settings_container
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            size_hint_min_x: self.minimum_width
            BoxLayout:
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                spacing: '5dp'
                ThemedSizedLabel:
                    text: 'Size: {}.'.format(pretty_space(app.player.recorder.size_recorded))
                ThemedSizedLabel:
                    text: 'Data rate: {}.'.format(pretty_space(app.player.recorder.data_rate, is_rate=True))
                ThemedSizedLabel:
                    text: 'Skipped: {}.'.format(app.player.recorder.frames_skipped)
                ThemedLabel:
                    text: app.player.recorder.recorder_summery
                    shorten: True
                    text_size: self.size


<ImageRecordSettingsDropdown@RecorderSettingsDropdown>:
    on_kv_post: self.settings_container.add_widget(app.player.image_file_recorder_settings)


<VideoRecordSettingsDropdown@RecorderSettingsDropdown>:
    on_kv_post: self.settings_container.add_widget(app.player.video_recorder_settings)


<VideoControl@BoxLayout>
    size_hint: None, None
    size: self.minimum_width, '34dp'
    padding: '5dp'
    spacing: '5dp'
    ThemedSpinner:
        size_hint_x: None
        width: self.minimum_width
        values: list(app.player.player_to_raw_name_map)
        text: app.player.player_to_nice_name_map[app.player.player_name]
        on_text: app.player.player_name = app.player.player_to_raw_name_map[self.text]
    FlatImageToggleButton:
        source: 'flat_play.png' if self.state == 'normal' else 'flat_stop.png'
        hover_text: '[b]play[/b] video' if self.state == 'normal' else '[b]stop[/b] video'
        flat_color: app.theme.accent
        disabled: not app.player.player.can_play or app.player.player.play_state == 'stopping'
        state: 'down' if app.player.player.play_state == 'starting' or app.player.player.play_state == 'playing' else 'normal'
        on_state: if self.state == 'normal': app.player.recorder.stop()
        on_release: app.player.player.play() if self.state == 'down' else app.player.player.stop()
    FlatImageButton:
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_kv_post:
            self.ffmpeg_dropdown = Factory.FFmpegSettingsDropdown()
            self.flir_dropdown = Factory.FlirSettingsDropdown()
            self.thor_dropdown = Factory.ThorSettingsDropdown()
            self.client_dropdown = Factory.ClientSettingsDropdown()
        on_release: getattr(self, '{}_dropdown'.format(app.player.player_name)).open(root)
    FlatDivider:
        color: app.theme.divider
    ThemedSpinner:
        size_hint_x: None
        width: self.minimum_width
        values: list(app.player.recorder_to_raw_name_map)
        text: app.player.recorder_to_nice_name_map[app.player.recorder_name]
        on_text: app.player.recorder_name = app.player.recorder_to_raw_name_map[self.text]
    FlatImageToggleButton:
        source: 'flat_record.png' if self.state == 'normal' else 'flat_stop.png'
        hover_text: 'record' if self.state == 'normal' else '[b]record[/b]'
        flat_color: app.theme.accent
        disabled: app.player.player.play_state != 'playing'
        state: 'down' if app.player.recorder.record_state == 'starting' or app.player.recorder.record_state == 'recording' else 'normal'
        on_release: app.player.recorder.record(app.player.player) if self.state == 'down' else app.player.recorder.stop()
    FlatImageButton:
        scale_down_color: True
        source: 'flat_dots_vertical.png'
        flat_color: app.theme.accent
        on_kv_post:
            self.image_file_dropdown = Factory.ImageRecordSettingsDropdown()
            self.video_dropdown = Factory.VideoRecordSettingsDropdown()
        on_release: getattr(self, '{}_dropdown'.format(app.player.recorder_name)).open(root)
    Widget:
        size_hint_x: None
        width: self.height
        canvas:
            Color:
                rgb: (1., 0, 0) if app.player.disk_used_percent >= .75 else app.theme.accent
            Ellipse:
                pos: self.pos
                size: self.size
                angle_end: app.player.disk_used_percent * 360.
            Line:
                circle: self.center_x, self.center_y, self.height / 2.
    FlatDivider:
        color: app.theme.divider
    FlatImageButton:
        id: h5_save_image_btn
        scale_down_color: True
        source: 'content-save-move.png'
        hover_text: 'Save cam image to current h5 file'
        flat_color: app.theme.accent
        last_image: None
        on_press: self.last_image = app.player.last_image
        on_release: self.h5_save.open(root)
        h5_save: h5_save.__self__
        on_kv_post: Clock.schedule_once(lambda *x: self.parent.remove_widget(self.h5_save))
    FlatDropDown:
        id: h5_save
        flat_color: app.theme.primary_text
        flat_border_color: app.theme.divider
        BoxLayout:
            spacing: '10dp'
            size_hint: None, None
            height: 3 * image_notes.line_height
            width: '400dp'
            FlatTextInput:
                id: image_notes
                hint_text: "Image notes"
            LightThemedButton:
                bold: True
                size_hint_x: None
                width: self.texture_size[0]
                padding: '5dp', '5dp'
                disabled: h5_save_image_btn.last_image is None
                on_release:
                    app.ceed_data.add_image_to_file(h5_save_image_btn.last_image, image_notes.text)
                    image_notes.text = ''
                    h5_save.dismiss()
                text: 'Add to h5 file'
    FlatImageButton:
        disabled: app.player.last_image is None
        scale_down_color: True
        source: 'flat_screenshot_save.png'
        hover_text: 'Save cam image'
        flat_color: app.theme.accent
        last_image: None
        on_press: self.last_image = app.player.last_image
        on_release: if self.last_image: app.open_filechooser(callback=partial(app.player.save_screenshot, self.last_image, app), target=app.last_directory, mode='save', title='Select target filename', filters=['*.bmp'])
    FlatImageButton:
        scale_down_color: True
        source: 'flat_screenshot_load.png'
        hover_text: 'Load cam image'
        flat_color: app.theme.accent
        on_release: app.open_filechooser(callback=partial(app.player.load_screenshot, app), target=app.last_directory, title='Select file', filters=['*.bmp', '*.h5', '*.*'])
    FlatImageButton:
        scale_down_color: True
        source: 'flat_refresh.png'
        hover_text: "reset to stage's final cam image"
        flat_color: app.theme.accent
        disabled: app.view_controller.last_cam_image is None
        on_release: app.player.display_frame(app.view_controller.last_cam_image)
    FlatDivider:
        color: app.theme.divider
