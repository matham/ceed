
<PaintBar@BoxLayout>:
    size_hint: None, None
    size: self.minimum_width, '34dp'
    padding: '5dp'
    spacing: '5dp'
    FlatImageToggleButton:
        group: 'paint'
        hover_text: 'circle' if self.state == 'normal' else '[b]circle[/b]'
        scale_down_color: True
        source: 'flat_circle.png'
        flat_color: app.theme.accent
        on_state: app.shape_factory.draw_mode = 'circle' if self.state == 'down' else 'none'
        test_name: 'draw circle'
    FlatImageToggleButton:
        group: 'paint'
        hover_text: 'ellipse' if self.state == 'normal' else '[b]ellipse[/b]'
        scale_down_color: True
        source: 'flat_ellipse.png'
        flat_color: app.theme.accent
        on_state: app.shape_factory.draw_mode = 'ellipse' if self.state == 'down' else 'none'
        test_name: 'draw ellipse'
    FlatImageToggleButton:
        group: 'paint'
        hover_text: 'freeform' if self.state == 'normal' else '[b]freeform[/b]'
        scale_down_color: True
        source: 'flat_polyline.png'
        flat_color: app.theme.accent
        state: 'down'
        on_state: app.shape_factory.draw_mode = 'freeform' if self.state == 'down' else 'none'
        test_name: 'draw freeform'
    FlatImageToggleButton:
        group: 'paint'
        hover_text: 'polygon' if self.state == 'normal' else '[b]polygon[/b]'
        scale_down_color: True
        source: 'flat_polygon.png'
        flat_color: app.theme.accent
        on_state: app.shape_factory.draw_mode = 'polygon' if self.state == 'down' else 'none'
        test_name: 'draw polygon'
    FlatSpinner:
        id: touch_mode
        values: ['Draw', 'Align_cam', 'Align_MEA']
        text: 'Draw'
        on_text:
            app.shape_factory.locked = self.text != 'Draw'
            app.shape_factory.move_cam = self.text == 'Align_cam'
            app.shape_factory.move_array = self.text == 'Align_MEA'
            if self.text == 'Align_MEA': mea_grid.state = 'down'
        size_hint_min_x: self.minimum_width
        flat_color: app.theme.text_primary
        flat_menu_color: app.theme.accent
        flat_drop_background_color: app.theme.primary_text
        flat_drop_text_color: app.theme.text_primary
        flat_border_color: app.theme.divider
    IconSwitchBehavior:
        id: mea_grid
        disabled: touch_mode.text == 'Align_MEA'
        hover_text: 'Show array grid' if self.state == 'normal' else 'Show array [b]grid[/b]'
        source_down: 'grid.png'
        source_normal: 'grid-off.png'
        flat_color: app.theme.accent
        on_state: app.mea_align_widget.show = self.state == 'down'


<ShapeListing@FlatSplitter>:
    size_hint_x: None
    width: '250dp'
    sizable_from: 'left'
    strip_size: '20dp'
    min_size: '15dp'
    max_size: '400dp'
    flat_color: app.theme.accent
    spacing: '5dp'
    test_name: 'shape splitter'
    BoxLayout:
        orientation: 'vertical'
        spacing: '5dp'
        BoxLayout:
            orientation: 'vertical'
            size_hint_y: None
            height: self.minimum_height
            padding: '5dp'
            spacing: '5dp'
            ScrollView:
                bar_width: '10dp'
                scroll_type: ['bars']
                do_scroll_y: False
                size_hint_y: None
                height: shapes_label.texture_size[1]
                BoxLayout:
                    size_hint_min_x: self.minimum_width
                    orientation: 'horizontal'
                    FlatImageButton:
                        test_name: 'add group'
                        scale_down_color: True
                        source: 'flat_plus.png'
                        flat_color: app.theme.accent
                        on_release: app.shape_factory.add_group().widget.expand_widget.state = 'down'
                    FlatLabel:
                        id: shapes_label
                        text: '{} Shapes / {} Groups'.format(len(app.shape_factory.shapes), len(app.shape_factory.groups)) if app.shape_factory is not None else 'Shapes'
                        width: self.texture_size[0]
                        size_hint_x: None
                        padding: '5dp', '5dp'
                        flat_color: app.theme.text_primary
                        center_texture: True
            FlatSplitter:
                test_name: 'expand group splitter'
                flat_color: app.theme.accent
                size_hint_min_x: self.minimum_width
                sizable_from: 'bottom'
                strip_size: '5dp'
                size_hint_y: None
                min_size: 0
                max_size: root.height
                height: '100dp'
                spacing: '5dp'
                ScrollView:
                    bar_width: '15dp'
                    scroll_type: ['bars']
                    ShapeGroupList:
                        test_name: 'shape group container'
                        on_kv_post: app.shape_groups_container = self
                        id: shape_groups
                        orientation: 'vertical'
                        spacing: '3dp'
                        padding: '0dp', '0dp', '10dp', '12dp'
                        size_hint_y: None
                        height: self.minimum_height
                        size_hint_min_x: self.minimum_width
                        multiselect: True
                        nodes_order_reversed: False
                        touch_deselect_last: True
                        spacer_props: {'size_hint_y': None, 'height': '40dp', 'size_hint_min_x': '40dp'}
                        drag_classes: ['shape', 'shape_group']
                        drag_append_end: True
                        canvas:
                            Color:
                                rgba: (152 / 255., 153 / 255., 155 / 255., 1.) if app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in ('shape', 'shape_group') else (0, 0, 0, 0)
                            Rectangle:
                                pos: self.pos
                                size: self.width, dp(10)
        ScrollView:
            size_hint_y: None
            height: '34dp'
            bar_width: '10dp'
            scroll_type: ['bars']
            do_scroll_y: False
            BoxLayout:
                size_hint_min_x: self.minimum_width
                Widget
                BoxLayout:
                    id: paint_box
                    size_hint: None, None
                    size: self.minimum_width, '34dp'
                    padding: '5dp'
                    spacing: '5dp'
                    canvas:
                        Color:
                            rgba: app.theme.primary
                        Rectangle:
                            pos: self.pos
                            size: self.size
                    FlatImageButton:
                        scale_down_color: True
                        source: 'checkbox-blank-outline.png'
                        hover_text: 'Add enclosing polygon'
                        flat_color: app.theme.accent
                        on_release: app.shape_factory.add_enclosing_polygon()
                        test_name: 'add enclosing polygon'
                    FlatDivider:
                        color: app.theme.divider
                    FlatImageButton:
                        scale_down_color: True
                        source: 'flat_copy.png'
                        hover_text: 'duplicate shapes' if self.state == 'normal' else '[b]duplicate[/b] shapes'
                        flat_color: app.theme.accent
                        on_release: app.shape_factory.duplicate_selected_shapes()
                        test_name: 'shape duplicate'
                    FlatImageButton:
                        scale_down_color: True
                        source: 'flat_delete.png'
                        hover_text: 'delete shapes' if self.state == 'normal' else '[b]delete[/b] shapes'
                        flat_color: app.theme.accent
                        on_release: app.shape_factory.delete_selected_shapes()
                        test_name: 'shape delete'
                    FlatDivider:
                        color: app.theme.divider
                    FlatImageToggleButton:
                        scale_down_color: True
                        hover_text: 'multiselect' if self.state == 'normal' else '[b]multi[/b]select'
                        source: 'flat_add_to_selection.png'
                        flat_color: app.theme.accent
                        test_name: 'shape multiselect'
                        on_state:
                            app.shape_groups_container.touch_multiselect = app.shapes_container.touch_multiselect = app.shape_factory.multiselect = self.state == 'down'
                    FlatImageToggleButton:
                        hover_text: '[b]hide[/b] / show pos' if self.state == 'normal' else 'hide / [b]show[/b] pos'
                        source: 'flat_map.png' if self.state == 'down' else 'flat_map_off.png'
                        flat_color: app.theme.accent
                        on_state: app.shape_factory.show_label = self.state == 'down'
                Widget
        ScrollView:
            bar_width: '15dp'
            scroll_type: ['bars']
            ShapeList:
                on_kv_post: app.shapes_container = self
                id: shapes
                orientation: 'vertical'
                spacing: '3dp'
                padding: 0, 0, '10dp', '12dp'
                size_hint_y: None
                height: self.minimum_height
                size_hint_min_x: self.minimum_width
                multiselect: True
                touch_deselect_last: True
                spacer_props: {'size_hint_y': None, 'height': '50dp', 'size_hint_min_x': '40dp'}
                drag_classes: ['shape']
                drag_append_end: True
                canvas:
                    Color:
                        rgba: (152 / 255., 153 / 255., 155 / 255., 1.) if app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls == 'shape' else (0, 0, 0, 0)
                    Rectangle:
                        pos: self.pos
                        size: self.width, dp(10)


<WidgetShape>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    orientation: 'vertical'
    more: more.__self__
    show_more: expand.is_open
    spacing: '5dp'
    padding: '5dp'
    flat_color: app.theme.primary_light if not root.selected else app.theme.primary
    canvas:
        Color:
            rgba: app.theme.primary_light if not root.selected else app.theme.primary
        Rectangle:
            size: self.size
            pos: self.pos
    BoxSelector:
        id: selector
        size_hint_y: None
        height: '34dp'
        size_hint_min_x: self.minimum_width
        orientation: 'horizontal'
        controller: app.shapes_container
        spacing: '2dp'
        padding: '5dp'
        selectee: root
        DraggingWidget:
            drag_widget: selector.__self__
            obj_dragged: root
            drag_cls: 'shape'
            flat_color: .835, .278, 0, 1
            test_name: 'shape drag'
        ExpandWidget:
            id: expand
            test_name: 'shape expand'
        FlatLabel:
            test_name: 'shape name'
            text_size: self.width, None
            shorten: True
            size_hint_min_x: '55dp'
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            center_texture: False
            text: root.shape.name if root.shape else ''
        FlatImageButton:
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            on_release: app.shape_factory.remove_shape(root.shape)
            test_name: 'shape remove'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_arrow_down_bold.png'
            flat_color: app.theme.accent
            on_release: app.shape_factory.move_shape_upwards(root.shape)
            test_name: 'shape down'
        FlatImageButton:
            scale_down_color: True
            source: 'flat_arrow_up_bold.png'
            flat_color: app.theme.accent
            on_release: app.shape_factory.move_shape_lower(root.shape)
            test_name: 'shape up'
        FlatImageToggleButton:
            hover_text: 'unlock shape' if self.state == 'down' else 'lock shape'
            source: 'flat_lock.png' if self.state == 'down' else 'flat_unlock.png'
            flat_color: app.theme.accent
            state: 'down' if root.shape and root.shape.locked else 'normal'
            on_state: root.painter.lock_shape(root.shape) if self.state == 'down' else root.painter.unlock_shape(root.shape)
            disabled: hidden.state == 'normal'
            test_name: 'shape lock'
        FlatImageToggleButton:
            id: hidden
            hover_text: 'hide shape' if self.state == 'down' else 'show shape'
            source: 'eye.png' if self.state == 'down' else 'eye-off.png'
            flat_color: app.theme.accent
            state: 'down'
            test_name: 'shape hide'
            on_state:
                root.shape.show_shape_in_canvas() if self.state == 'down' else root.shape.hide_shape_in_canvas()
                if self.state == 'normal': root.painter.lock_shape(root.shape)
    BoxLayout:
        id: more
        spacing: '5dp'
        padding: '5dp', '5dp', 0, 0
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        orientation: 'vertical'
        FlatSizedTextInput:
            background_color: root.flat_color
            text: root.shape.name if root.shape else ''
            on_focus: if not self.focus: root.shape.name = self.text
            test_name: 'shape textname'
        BoxLayout:
            size_hint_y: None
            height: self.minimum_height
            spacing: '8dp'
            FlatSizedTextInput:
                hint_text: 'X'
                background_color: root.flat_color
                input_filter: 'int'
                text: str(int(root.centroid_x))
                test_name: 'shape posx'
                on_focus:
                    if not self.focus and self.text: root._update_centroid(x=int(self.text))
                    if not self.text: self.text = str(int(root.centroid_x))
            FlatSizedTextInput:
                hint_text: 'Y'
                background_color: root.flat_color
                input_filter: 'int'
                text: str(int(root.centroid_y))
                test_name: 'shape posy'
                on_focus:
                    if not self.focus and self.text: root._update_centroid(y=int(self.text))
                    if not self.text: self.text = str(int(root.centroid_y))
        FlatSizedTextInput:
            hint_text: 'Area'
            background_color: root.flat_color
            input_filter: 'float'
            text: str(float(root.area))
            test_name: 'shape area'
            on_focus:
                if not self.focus and self.text: root._update_area(float(self.text))
                if not self.text: self.text = str(float(root.area))


<BoxShapeDraggableLayoutBehavior@ShapeGroupDraggableLayoutBehavior+BoxLayout>

<WidgetShapeGroup>:
    size_hint_y: None
    height: self.minimum_height
    size_hint_min_x: self.minimum_width
    orientation: 'vertical'
    more: more.__self__
    show_more: expand.is_open
    spacing: '5dp'
    flat_color: app.theme.primary_light if not root.selected else app.theme.primary
    expand_widget: expand
    BoxSelector:
        id: selector
        size_hint_y: None
        height: '34dp'
        size_hint_min_x: self.minimum_width
        orientation: 'horizontal'
        controller: app.shape_groups_container
        selectee: root
        spacing: '5dp'
        padding: '5dp'
        canvas:
            Color:
                rgba: app.theme.primary_light if not root.selected else app.theme.primary
            Rectangle:
                size: self.size
                pos: self.pos
        DraggingWidget:
            test_name: 'group drag button'
            drag_widget: selector.__self__
            obj_dragged: root
            drag_cls: 'shape_group'
            flat_color: .835, .278, 0, 1
        ExpandWidget:
            id: expand
            test_name: 'shape group expand'
        FlatLabel:
            test_name: 'group name'
            text: root.group.name if root.group else ''
            size_hint_min_x: self.texture_size[0]
            padding: '5dp', '5dp'
            flat_color: app.theme.text_primary
            center_texture: False
        FlatImageButton:
            test_name: 'shape group delete'
            scale_down_color: True
            source: 'flat_delete.png'
            flat_color: app.theme.accent
            on_release: app.shape_factory.remove_group(root.group)
    BoxShapeDraggableLayoutBehavior:
        id: more
        test_name: 'shape group obj container'
        spacing: '5dp'
        matched_drag: bool(app.drag_controller.dragging and app.drag_controller.widget_dragged and app.drag_controller.widget_dragged.drag_cls in ('shape', 'shape_group') and expand.is_open)
        padding: '15dp', 0, 0, ('12dp' if self.matched_drag or len(self.children) == 1 else 0)
        size_hint_y: None
        height: self.minimum_height
        size_hint_min_x: self.minimum_width
        orientation: 'vertical'
        spacer_props: {'size_hint_y': None, 'height': '50dp', 'size_hint_min_x': '40dp'}
        drag_classes: ['shape']
        drag_append_end: True
        group_widget: root
        canvas:
            Color:
                rgba: (152 / 255., 153 / 255., 155 / 255., 1.) if self.matched_drag else (0, 0, 0, 0)
            Rectangle:
                pos: self.x + dp(15), self.y
                size: self.width - dp(15), dp(10)
            Color:
                rgba: app.theme.divider
            Rectangle:
                pos: self.x + dp(11), self.y
                size: dp(2), self.height - dp(2)
        FlatSizedTextInput:
            test_name: 'group name input'
            background_color: root.flat_color
            text: root.group.name if root.group else ''
            on_focus: if not self.focus: root.group.name = self.text


<ShapeGroupItem>:
    size_hint_y: None
    height: '34dp'
    size_hint_min_x: self.minimum_width
    orientation: 'horizontal'
    spacing: '5dp'
    canvas:
        Color:
            rgba: app.theme.primary_light
        Rectangle:
            size: self.size
            pos: self.pos
    FlatLabel:
        test_name: 'group shape item label'
        padding: '5dp', '5dp'
        flat_color: app.theme.text_primary
        center_texture: False
        text: root.shape.name if root.shape is not None else ''
        size_hint_min_x: self.texture_size[0]
    FlatImageButton:
        test_name: 'delete group item'
        scale_down_color: True
        source: 'flat_delete.png'
        flat_color: app.theme.accent
        on_release: root.group.group.remove_shape(root.shape)
